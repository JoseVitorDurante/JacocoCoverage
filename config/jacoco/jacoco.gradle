apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.10'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

        reports {
            xml.required.set(true)
            html.required.set(true)
            csv.required.set(false)

            xml.destination = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
            html.destination = file("${buildDir}/reports/jacoco/test/html")
        }

        println "Build Dir: ${project.projectDir}"

        println "Project Build Dir: ${buildDir}"

        def fileFilter = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                '**/*.kotlin_module'
        ]

        def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
        def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([javaDebugTree, kotlinDebugTree]))
        executionData.setFrom(fileTree(dir: "$buildDir", includes:
                ["jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"]))
    }

    tasks.create(name: "jacocoAllCoverage", type: JacocoReport, dependsOn: "testDebugUnitTest") {

        group = "Reporting"
        description = "Generate Jacoco coverage reports for the debug build."

        reports {
            html.required.set(true)
            xml.required.set(true)
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                '**/*$ViewInjector*.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory.*',
                '**/*_Provide*Factory*.*',
                '**/*_ViewBinding*.*',
                '**/AutoValue_*.*',
                '**/R2.class',
                '**/R2$*.class',
                '**/*Directions$*',
                '**/*Directions.*',
                '**/*Binding.*'
        ]


        def jClasses = "${project.buildDir}/intermediates/javac/debug/classes"
        def kClasses = "${project.buildDir}/tmp/kotlin-classes/debug"
        def javaClasses = fileTree(dir: jClasses, excludes: excludes)

        def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)

        classDirectories.from = files([javaClasses, kotlinClasses])
        def sourceDirs = ["${project.projectDir}/src/main/java", "${project.projectDir}/src/main/kotlin",
                          "${project.projectDir}/src/debug/java", "${project.projectDir}/src/debug/kotlin"]

        sourceDirectories.from = files(sourceDirs)

        executionData.from = files(["${project.buildDir}/jacoco/testDebugUnitTest.exec"])
    }
}
